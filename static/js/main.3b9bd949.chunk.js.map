{"version":3,"sources":["Display.js","Lemon/Lemon.js","Blueberry/Blueberry.js","Pear/Pear.js","Pom/Pom.js","Tomato/Tomato.js","Fruits.js","App.js","serviceWorker.js","index.js"],"names":["Display","props","className","component","Lemon","Blueberry","Pear","Pom","Tomato","fruit_bag","App","fruit_things","map","item","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qUAYeA,MAVf,SAAiBC,GACf,OAEE,yBAAKC,UAAU,WACZD,EAAME,Y,MCoCEC,MAvCf,WACE,OAEE,yBAAKF,UAAU,mBAEb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,kBAGf,8BAEA,yBAAKA,UAAU,SAEb,yBAAKA,UAAU,eACf,yBAAKA,UAAU,cAEb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,oBACf,yBAAKA,UAAU,aAEjB,yBAAKA,UAAU,cACb,yBAAKA,UAAU,uBAEf,yBAAKA,UAAU,mBAOvB,yBAAKA,UAAU,mB,MCONG,MArCf,WACE,OAEE,yBAAKH,UAAU,uBAEb,yBAAKA,UAAU,mBAEb,yBAAKA,UAAU,oBAEb,yBAAKA,UAAU,yBAGf,yBAAKA,UAAU,wBAAf,MAOF,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,uBAMnB,yBAAKA,UAAU,mB,MCaNI,MAvCf,WACE,OAEE,yBAAKJ,UAAU,kBAGb,yBAAKA,UAAU,cAEb,yBAAKA,UAAU,QAIb,yBAAKA,UAAU,YAEb,yBAAKA,UAAU,qBAIjB,yBAAKA,UAAU,eACb,yBAAKA,UAAU,wBAKjB,yBAAKA,UAAU,aAEb,yBAAKA,UAAU,mB,MCaZK,MAtCf,WACE,OACE,yBAAKL,UAAU,iBAIb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,aACf,yBAAKA,UAAU,aACf,yBAAKA,UAAU,cAGjB,yBAAKA,UAAU,YAIb,yBAAKA,UAAU,aAEb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,mBACf,yBAAKA,UAAU,oBACf,yBAAKA,UAAU,yB,MC6CZM,MAlEf,WACE,OACE,yBAAKN,UAAU,oBAqBb,yBAAKA,UAAU,eAGb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,oBACf,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,oBAEjB,yBAAKA,UAAU,sBAKjB,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,uBACf,yBAAKA,UAAU,wBACb,yBAAKA,UAAU,uBAGjB,yBAAKA,UAAU,0BAKnB,yBAAKA,UAAU,eAGb,yBAAKA,UAAU,iBAEb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,kBAInB,yBAAKA,UAAU,qBCnCRO,EAlBG,CAChB,CACEN,UAAW,kBAAC,EAAD,OAEb,CACEA,UAAW,kBAAC,EAAD,OAEb,CACEA,UAAW,kBAAC,EAAD,OAEb,CACEA,UAAW,kBAAC,EAAD,OAEb,CACEA,UAAW,kBAAC,EAAD,QCDAO,MAhBf,WACE,IAAMC,EAAeF,EAAUG,IAAI,SAACC,GAElC,OADAC,QAAQC,IAAIF,GAEV,kBAAC,EAAD,CACEV,UAAWU,EAAKV,cAItB,OACE,yBAAKD,UAAU,OACZS,ICJaK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3b9bd949.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Display(props) {\n  return (\n\n    <div className='display'>\n      {props.component}\n    </div>\n\n  )\n}\n\nexport default Display","import React from 'react'\nimport './Lemon.css'\n\nfunction Lemon() {\n  return (\n\n    <div className='lemon_container'>\n\n      <div className='total_lemon'>\n        <div className='lemon_shading'></div>\n\n\n        <div></div>\n\n        <div className='lemon'>\n\n          <div className='lemon_leaf'></div>\n          <div className='lemon_nobs'>\n\n            <div className='top_nob'>\n              <div className='top_nob_shading'></div>\n              <div className='top_bud'></div>\n            </div>\n            <div className='bottom_nob'>\n              <div className='bottom_nob_shading'></div>\n\n              <div className='bottom_bud'></div>\n            </div>\n\n          </div>\n\n        </div>\n      </div>\n      <div className='lemon_shadow'></div>\n    </div>\n\n\n\n  )\n}\n\n\nexport default Lemon","import React from 'react'\nimport './Blueberry.css'\n\nfunction Blueberry() {\n  return (\n\n    <div className='blueberry_container'>\n\n      <div className='total_blueberry'>\n\n        <div className='blueberry_leaves'>\n\n          <div className='blueberry_leaf_outer'>\n          </div>\n\n          <div className='blueberry_leaf_inner'> </div>\n\n        </div>\n\n\n\n\n        <div className='blueberry_base'>\n          <div className='blueberry_shadow'></div>\n\n        </div>\n\n      </div>\n\n      <div className='bloob_shadow'></div>\n\n    </div>\n\n\n\n  )\n}\n\n\n\nexport default Blueberry","import React from 'react'\nimport './Pear.css'\n\nfunction Pear() {\n  return (\n\n    <div className='pear_container'>\n\n\n      <div className='total_pear'>\n        {/* Pear Base */}\n        <div className='pear'>\n\n\n\n          <div className='pear_top'>\n\n            <div className='pear_top_shadow'></div>\n          </div>\n\n          {/* Pear Bottom */}\n          <div className='pear_bottom'>\n            <div className='pear_bottom_shadow'>\n            </div>\n          </div>\n\n\n          <div className='pear_stem'>\n\n            <div className='pear_leaf'></div>\n\n          </div>\n\n\n\n        </div>\n      </div>\n\n    </div>\n  )\n}\n\nexport default Pear","import React from 'react'\nimport './Pom.css'\n\n\nfunction Pom() {\n  return (\n    <div className='pom_container'>\n\n\n      {/* Pom Top */}\n      <div className='pom_tops'>\n        <div className='pom_top1'></div>\n        <div className='pom_top2'></div>\n        <div className='pom_top3'></div>\n      </div>\n\n      <div className='pom_base'>\n\n\n\n        <div className='pom_inner'>\n\n          <div className='pom_lines'>\n            <div className='pom_inner_line'></div>\n            <div className='pom_inner_line2'></div>\n            <div className='pom_inner_line3'></div>\n          </div>\n\n        </div>\n\n      </div>\n\n\n\n\n    </div>\n\n  )\n}\n\n\n\nexport default Pom; ","import React from 'react'\nimport './Tomato.css'\n\n\nfunction Tomato() {\n  return (\n    <div className='tomato_container'>\n\n\n\n      {/* <div className='center_leaves'>\n        <div className='center_leaf1'></div>\n        <div className='center_leaf2'></div>\n      </div>\n \n      <div className='tomato_leaves'>\n\n        <div className='tomato_leaf4'></div>\n        <div className='tomato_leaf1'></div>\n        <div className='tomato_leaf2'></div>\n        <div className='tomato_leaf3'></div>\n        <div className='tomato_leaf5'></div>\n      </div> */}\n\n\n\n      {/* Tomato Ends */}\n      <div className='tomato_ends'>\n\n        {/* Tomato Top */}\n        <div className='tomato_top'>\n          <div className='tomato_top_left'></div>\n          <div className='tomato_top_middle'>\n            <div className='top_nob_shadow'></div>\n          </div>\n          <div className='tomato_top_right'></div>\n\n        </div>\n\n        {/* Tomato Bottom */}\n        <div className='tomato_bottom'>\n          <div className='tomato_bottom_left'></div>\n          <div className='tomato_bottom_middle'>\n            <div className='bottom_nob_shadow'></div>\n\n          </div>\n          <div className='tomato_bottom_right'></div>\n        </div>\n\n      </div>\n\n      <div className='tomato_base'>\n\n        {/* Tomato Leaves */}\n        <div className='tomato_leaves'>\n\n          <div className='tomato_leaf'>\n            <div className='tomato_stem'></div>\n          </div>\n        </div>\n\n        <div className='tomato_shadow'></div>\n\n\n      </div>\n\n    </div>\n  )\n}\n\nexport default Tomato","import React from 'react'\nimport Lemon from './Lemon/Lemon'\nimport Blueberry from './Blueberry/Blueberry'\nimport Pear from './Pear/Pear'\nimport Pom from './Pom/Pom'\nimport Tomato from './Tomato/Tomato'\n\n\nconst fruit_bag = [\n  {\n    component: <Lemon />\n  },\n  {\n    component: <Blueberry />\n  },\n  {\n    component: <Pear />\n  },\n  {\n    component: <Pom />\n  },\n  {\n    component: <Tomato />\n  }\n]\n\nexport default fruit_bag","import React from 'react';\nimport './App.css'\nimport Display from './Display'\nimport fruit_bag from './Fruits'\n\nfunction App() {\n  const fruit_things = fruit_bag.map((item) => {\n    console.log(item)\n    return (\n      <Display\n        component={item.component}\n      />\n    )\n  })\n  return (\n    <div className='App'>\n      {fruit_things}\n    </div >\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}